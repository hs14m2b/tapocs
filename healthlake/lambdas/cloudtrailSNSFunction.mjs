import { GetObjectCommand, HeadObjectCommand, PutObjectCommand, S3Client } from '@aws-sdk/client-s3';
import { SNSClient, PublishCommand } from "@aws-sdk/client-sns";

const REGION = "eu-west-2";
const snsClient = new SNSClient({
  region: REGION
});


import { gunzipSync } from 'zlib';

const s3Client = new S3Client({
    apiVersion: '2006-03-01',
    region: REGION
});

const SNSTOPICARN = process.env["SNSTOPICARN"];

export const handler = async (event) => {
  //console.log(JSON.stringify(event));
  try {
    for (let record of event.Records) {
      let messageString = record.Sns.Message;
      let messageJson = JSON.parse(messageString);
      //console.log("Message is " + JSON.stringify(messageJson));
      await processS3Trail(messageJson);
    }
  } catch (error) {
    
  }
}

async function processS3Trail(messageJson)
{
  console.log("processing S3 file " + JSON.stringify(messageJson));
  for (let s3ObjectKey of messageJson.s3ObjectKey)
  {
    let params = {
      Key: s3ObjectKey,
      Bucket: messageJson.s3Bucket,
    };
    let buf;
    try {
      buf = await getS3Object(params);
      //console.log("received buffer of S3 content - unzipping");
      let unzippedCloudTrailContents = gunzipSync(buf).toString("utf-8");
      let unzippedCloudTrailContentsJSON = JSON.parse(unzippedCloudTrailContents);
      //console.log("have successfully read the S3 contents into JSON object");
      for (let cloudTrailRecord of unzippedCloudTrailContentsJSON.Records){
        //console.log("checking record generated by " + cloudTrailRecord.eventSource);
        if (cloudTrailRecord.eventSource == "healthlake.amazonaws.com"){
          console.log("found an event we are interested in!");
          console.log(JSON.stringify(cloudTrailRecord));
          //check that eventName is UpdateResource or CreateResource
          if (cloudTrailRecord.eventName == "UpdateResource" || cloudTrailRecord.eventName == "CreateResource")
          {
            console.log("publishing record to SNS");
            /**
             * @param {string | Record<string, any>} message - The message to send. Can be a plain string or an object
             *                                                 if you are using the `json` `MessageStructure`.
             * @param {string} topicArn - The ARN of the topic to which you would like to publish.
             */
            let params = {
              Message: JSON.stringify(cloudTrailRecord),
              TopicArn: SNSTOPICARN,
            }
            let snsResponse = await snsClient.send(
                new PublishCommand(params),
              );
            console.log(snsResponse);
          }
        }
      }
    } catch (error) {
      console.log(error);
      throw error
    }
  }

  return true;

}

async function getS3Object(params) {
  const response = await s3Client
      .send(new GetObjectCommand(params))
  const stream = response.Body;

  return new Promise((resolve, reject) => {
      const chunks = []
      stream.on('data', chunk => { console.log("received a chunk"); chunks.push(chunk) })
      stream.on('end', () => resolve(Buffer.concat(chunks)))
      stream.on('error', err => reject(err))
  });
  // if readable.toArray() is support
  // return Buffer.concat(await stream.toArray())
}
