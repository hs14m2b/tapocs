{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Parameters": {
    "AWSREGIONNAME": {
      "Type": "String",
      "Default": "eu-west-2",
      "Description": "The AWS region name"
    },
    "BEDOMAIN": {
      "Type": "String",
      "Default": "xcapocbe",
      "Description": "Back end domain identifier"
    },
    "BRANCHNAME": {
      "Type": "String",
      "Default": "main",
      "Description": "The branchname to derive fqdn"
    },
    "PROJECTNAME": {
      "Type": "String",
      "Default": "xcapoc-001",
      "Description": "Project name for the deployment"
    },
    "CERTIFICATEARN": {
      "Type": "String",
      "Default": "arn:aws:acm:eu-west-2:865198111306:certificate/00f7f457-ab67-40fe-a846-10a4ba5790d8",
      "Description": "The certificate ARN for the gazelle-issued main-xcapoc-001.xcapocbe.nhsesolarch.com domain"
    },
    "DEPLOYMENTSTAGENAME": {
      "Type": "String",
      "Default": "prod",
      "Description": "The stage deployment name"
    },
    "FEDOMAIN": {
      "Type": "String",
      "Default": "xcapocfe",
      "Description": "The frontend domain identifier"
    },
    "HOSTEDZONEID": {
      "Type": "String",
      "Default": "Z03247032R0Q3F51JOPQT",
      "Description": "The ID of the Route53 hosted zone"
    },
    "ROOTDOMAIN": {
      "Type": "String",
      "Default": "nhsesolarch.com",
      "Description": "The root domain name"
    },
    "SHORTCODE": {
      "Type": "String",
      "Default": "mabr8",
      "Description": "The shortcode for tags"
    }
  },
  "Globals": {
    "Function": {
      "Tags": {
        "shortcode": { "Ref": "SHORTCODE" }
      },
      "Environment": {
        "Variables": {
          "ROOTDOMAIN": { "Ref": "ROOTDOMAIN" },
          "BRANCHNAME": { "Ref": "BRANCHNAME" },
          "FEDOMAIN": { "Ref": "FEDOMAIN" }
        }
      },
      "Timeout": 300
    }
  },
  "Resources": {
    "xcapocbeLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB"
        ],
        "Path": "/service-role/",
        "RoleName": {
          "Fn::Join": [
            "",
            [{ "Ref": "BRANCHNAME" }, "-", "xcapocbeLambdaRole-001"]
          ]
        }
      }
    },
    "xcapocbeCWRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchEventsFullAccess"
        ],
        "Path": "/service-role/",
        "RoleName": {
          "Fn::Join": ["", [{ "Ref": "BRANCHNAME" }, "-", "xcapocbeCWRole"]]
        }
      }
    },
    "S3InputBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "BucketKeyEnabled": true,
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "BucketName": {
          "Fn::Join": [
            "-",
            [{ "Ref": "BRANCHNAME" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "xcaresources"]
          ]
        },
        "ObjectLockEnabled": false,
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "Tags": [{ "Key": "shortcode", "Value": { "Ref": "SHORTCODE" } }]
      },
      "DependsOn": []
    },
    "dummyXCAEndpointFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "xcapocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy XCA endpoint",
        "Environment": {
          "Variables" : {
            "S3BUCKET" : {
              "Fn::Join": [
                "-",
                [{ "Ref": "BRANCHNAME" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "xcaresources"]
              ]
            }
          }
        },
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "xcaHttpApi" },
              "Method": "ANY",
              "Path": "/extapi/XCA/dummyXCAendpoint",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "BRANCHNAME" }, "-dummyXCAEndpointFunction"]]
        },
        "Handler": "dummyXCAendpoint.handler",
        "Role": { "Fn::GetAtt": ["xcapocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs16.x",
        "Timeout": 300
      },
      "DependsOn": ["xcapocbeLambdaRole"]
    },
    "xcaHttpApi": {
      "Type": "AWS::Serverless::HttpApi",
      "Properties": {
        "Description": "HTTP API for the xca server requests",
        "Domain": {
          "BasePath": ["/"],
          "CertificateArn": {"Ref": "CERTIFICATEARN"},
          "DisableExecuteApiEndpoint": true,
          "DomainName": {"Fn::Join": [".", [{"Fn::Join": ["-", [{ "Ref": "BRANCHNAME" }, { "Ref": "PROJECTNAME" } ]]},{ "Ref": "BEDOMAIN" },{ "Ref": "ROOTDOMAIN" }]]},
          "EndpointConfiguration": "REGIONAL",
          "MutualTlsAuthentication": {
            "TruststoreUri" : "s3://cv19-testing/certificates/gazelle-ca.pem"
          },
          "OwnershipVerificationCertificateArn": "arn:aws:acm:eu-west-2:865198111306:certificate/8434695e-f319-4304-a489-bb11b24fdd08",
          "Route53": {
            "HostedZoneId": {"Ref": "HOSTEDZONEID"}
          },
          "SecurityPolicy": "TLS_1_2"
        },
        "Name": {
          "Fn::Join": ["", [{ "Ref": "BRANCHNAME" }, "-xcaHttpApi"]]
        },
        "StageName": "$default"
      }
    }
  }
}
