{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Parameters": {
    "AWSREGIONNAME": {
      "Type": "String",
      "Default": "eu-west-2",
      "Description": "The AWS region name"
    },
    "APIENVIRONMENT": {
      "Type": "String",
      "Description": "The API-M environment the deployment supports - values are internal-dev, internal-dev-sandbox, internal-qa, internal-qa-sandbox, ref (all previous are non-prod), sandbox, dev, int, prod"
    },
    "BEDOMAIN": {
      "Type": "String",
      "Default": "mhdpocbe",
      "Description": "Back end domain identifier"
    },
    "BRANCHNAME": {
      "Type": "String",
      "Default": "main",
      "Description": "The branchname to derive fqdn"
    },
    "PROJECTNAME": {
      "Type": "String",
      "Default": "mhdpoc",
      "Description": "Project name for the deployment"
    },
    "PROJECTNAMESECURE": {
      "Type": "String",
      "Default": "mhdpoctlsma",
      "Description": "Project name for the deployment"
    },
    "CFCERTARN": {
      "Type": "String",
      "Description": "Certificate for CloudFront deployment *.nhsdta.com - in US East 1",
      "Default": "arn:aws:acm:us-east-1:865198111306:certificate/6736e423-7278-444e-aa34-7d849d896d4f"
    },
    "CERTIFICATEARN": {
      "Type": "String",
      "Default": "arn:aws:acm:eu-west-2:865198111306:certificate/c4bf4fbf-7440-4345-8720-eff73b19bcce",
      "Description": "The certificate ARN for the nhsdta.com domain"
    },
    "DEPLOYMENTSTAGENAME": {
      "Type": "String",
      "Default": "prod",
      "Description": "The stage deployment name"
    },
    "FEDOMAIN": {
      "Type": "String",
      "Default": "mhdpocfe",
      "Description": "The frontend domain identifier"
    },
    "HOSTEDZONEID": {
      "Type": "String",
      "Default": "Z1075FNTZPAM5I",
      "Description": "The ID of the Route53 hosted zone"
    },
    "ROOTDOMAIN": {
      "Type": "String",
      "Default": "nhsdta.com",
      "Description": "The root domain name"
    },
    "SHORTCODE": {
      "Type": "String",
      "Default": "mabr8",
      "Description": "The shortcode for tags"
    }
  },
  "Globals": {
    "Function": {
      "Tags": {
        "shortcode": { "Ref": "SHORTCODE" }
      },
      "Environment": {
        "Variables": {
          "ROOTDOMAIN": { "Ref": "ROOTDOMAIN" },
          "BRANCHNAME": { "Ref": "BRANCHNAME" },
          "FEDOMAIN": { "Ref": "FEDOMAIN" },
          "APIENVIRONMENT": {"Ref": "APIENVIRONMENT"},
          "APIKNAMEPARAM": {"Fn::Join": ["-",[{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "apimkeyname"]]},
          "APIKEYSECRET": {"Fn::Join": ["-",[{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "apimclientcertkey"]]}
        }
      },
      "Timeout": 300
    }
  },
  "Resources": {
    "mhdpocbeLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB"
        ],
        "Path": "/service-role/",
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [{ "Ref": "APIENVIRONMENT" },  "mhdpocbeLambdaRole-001", "ssmread"]
              ]
            },
            "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "SSMRead",
                        "Effect": "Allow",
                        "Action": [
                            "secretsmanager:GetSecretValue",
                            "ssm:GetParameter"
                        ],
                        "Resource": "*"
                    }
                ]
            }
        }        ],
        "RoleName": {
          "Fn::Join": [
            "",
            [{ "Ref": "APIENVIRONMENT" }, "-", "mhdpocbeLambdaRole-001"]
          ]
        }
      }
    },
    "mhdpocbeCWRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchEventsFullAccess"
        ],
        "Path": "/service-role/",
        "RoleName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-", "mhdpocbeCWRole"]]
        }
      }
    },
    "mhdServerFunctionLayer": {
      "Type": "AWS::Serverless::LayerVersion",
      "Properties": {
        "ContentUri": "dependenciesLayer.zip",
        "Description": "The lambda layer containing the dependencies for the Lambda",
        "LayerName": {
          "Fn::Join": [
            "",
            [{ "Ref": "APIENVIRONMENT" }, "-mhdServerDependencies"]
          ]
        },
        "RetentionPolicy": "Delete"
      }
    },
    "MHDSBaseEndpointFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy MHDS Base Endpoint",
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-MHDSBaseEndpointFunction"]]
        },
        "Handler": "MHDSBaseEndpointFactory.handler",
        "Layers": [{"Ref": "mhdServerFunctionLayer"}],
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "DocumentReferenceFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy FHIR endpoint for DocumentReference resources",
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DocumentReference/{documentid+}",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DocumentReference/{documentid+}",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-DocumentReferenceFunction"]]
        },
        "Handler": "DocumentReferenceFactory.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "DocumentReferenceSearchFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy FHIR endpoint for DocumentReference resources search",
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DocumentReference",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DocumentReference",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-DocumentReferenceSearchFunction"]]
        },
        "Handler": "DocumentReferenceSearchFactory.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "ListFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy FHIR endpoint for List resources",
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/List/{listid+}",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/List/{listid+}",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-ListFunction"]]
        },
        "Handler": "List.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "ListSearchFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy FHIR endpoint for List resources",
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/List",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/List",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-ListSearchFunction"]]
        },
        "Handler": "ListSearch.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "DiagnosticReportLocalFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy local FHIR endpoint for DiagnosticReport resources",
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DiagnosticReportLocal/{diagnosticreportid+}",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DiagnosticReportLocal/{diagnosticreportid+}",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-DiagnosticReportLocalFunction"]]
        },
        "Handler": "DiagnosticReportLocal.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "DiagnosticReportProxyFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a proxy to retrieve DiagnosticReport resources",
        "Environment": {
          "Variables" : {
            "SECRETSMGRCERT":  {
              "Fn::Join": [
                "-",
                [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "clientcert"]
              ]
            },
            "SECRETSMGRCERTKEY":  {
              "Fn::Join": [
                "-",
                [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "clientcertkey"]
              ]
            }
          }
        },
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DiagnosticReport",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DiagnosticReport",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "Api1": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DiagnosticReportProxy",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure1": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DiagnosticReportProxy",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-DiagnosticReportProxyFunction"]]
        },
        "Handler": "DiagnosticReportProxy.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "IntrospectFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy Oauth2 introspect endpoint",
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/oauth2/introspect",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/oauth2/introspect",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-introspectFunction"]]
        },
        "Handler": "introspect.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "TokenFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy Oauth2 token endpoint and passes requests on to API-M",
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/oauth2/token",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/oauth2/token",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-tokenFunction"]]
        },
        "Handler": "token.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "pingFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that reflects back the request event",
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/ping",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/ping",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-pingFunction"]]
        },
        "Handler": "ping.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "mhdHttpApi": {
      "Type": "AWS::Serverless::HttpApi",
      "Properties": {
        "Description": "HTTP API for the mhd server requests",
        "Domain": {
          "BasePath": ["/"],
          "CertificateArn": {"Ref": "CERTIFICATEARN"},
          "DomainName": {"Fn::Join": [".", [{"Fn::Join": ["-", [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "BEDOMAIN" }]]},{ "Ref": "ROOTDOMAIN" }]]},
          "EndpointConfiguration": "REGIONAL",
          "Route53": {
            "HostedZoneId": {"Ref": "HOSTEDZONEID"}
          },
          "SecurityPolicy": "TLS_1_2"
        },
        "Name": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-mhdHttpApi"]]
        },
        "StageName": "$default"
      }
    },
    "mhdHttpApiSecure": {
      "Type": "AWS::Serverless::HttpApi",
      "Properties": {
        "Description": "HTTP API for the mhd server requests",
        "DisableExecuteApiEndpoint": true,
        "Domain": {
          "BasePath": ["/"],
          "CertificateArn": {"Ref": "CERTIFICATEARN"},
          "DomainName": {"Fn::Join": [".", [{"Fn::Join": ["-", [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAMESECURE" }, { "Ref": "BEDOMAIN" }]]},{ "Ref": "ROOTDOMAIN" }]]},
          "EndpointConfiguration": "REGIONAL",
          "MutualTlsAuthentication": {
            "TruststoreUri" :  { "Fn::Join": ["", [
              "s3://",
              {
                "Fn::Join": [
                  "-",
                  [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "certs","bucket"]
                ]
              },
              "/certs/202406031150tsassolarchdemoapitruststore.pem"]]}
          },
          "Route53": {
            "HostedZoneId": {"Ref": "HOSTEDZONEID"}
          },
          "SecurityPolicy": "TLS_1_2"
        },
        "Name": {
          "Fn::Join": ["-", [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAMESECURE" },"mhdHttpApi"]]
        },
        "StageName": "$default"
      }
    }
  }
}
