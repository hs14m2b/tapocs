{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Parameters": {
    "AWSREGIONNAME": {
      "Type": "String",
      "Default": "eu-west-2",
      "Description": "The AWS region name"
    },
    "APIENVIRONMENT": {
      "Type": "String",
      "Description": "The API-M environment the deployment supports - values are internal-dev, internal-dev-sandbox, internal-qa, internal-qa-sandbox, ref (all previous are non-prod), sandbox, dev, int, prod"
    },
    "BEDOMAIN": {
      "Type": "String",
      "Default": "mhdpocbe",
      "Description": "Back end domain identifier"
    },
    "BRANCHNAME": {
      "Type": "String",
      "Default": "main",
      "Description": "The branchname to derive fqdn"
    },
    "PROJECTNAME": {
      "Type": "String",
      "Default": "mhdpoc",
      "Description": "Project name for the deployment"
    },
    "PROJECTNAMESECURE": {
      "Type": "String",
      "Default": "mhdpoctlsma",
      "Description": "Project name for the deployment"
    },
    "CFCERTARN": {
      "Type": "String",
      "Description": "Certificate for CloudFront deployment *.nhsdta.com - in US East 1",
      "Default": "arn:aws:acm:us-east-1:865198111306:certificate/6736e423-7278-444e-aa34-7d849d896d4f"
    },
    "CERTIFICATEARN": {
      "Type": "String",
      "Default": "arn:aws:acm:eu-west-2:865198111306:certificate/c4bf4fbf-7440-4345-8720-eff73b19bcce",
      "Description": "The certificate ARN for the nhsdta.com domain"
    },
    "DEPLOYMENTSTAGENAME": {
      "Type": "String",
      "Default": "prod",
      "Description": "The stage deployment name"
    },
    "FEDOMAIN": {
      "Type": "String",
      "Default": "mhdpocfe",
      "Description": "The frontend domain identifier"
    },
    "HOSTEDZONEID": {
      "Type": "String",
      "Default": "Z1075FNTZPAM5I",
      "Description": "The ID of the Route53 hosted zone"
    },
    "ROOTDOMAIN": {
      "Type": "String",
      "Default": "nhsdta.com",
      "Description": "The root domain name"
    },
    "SHORTCODE": {
      "Type": "String",
      "Default": "mabr8",
      "Description": "The shortcode for tags"
    }
  },
  "Globals": {
    "Function": {
      "Tags": {
        "shortcode": { "Ref": "SHORTCODE" }
      },
      "Environment": {
        "Variables": {
          "ROOTDOMAIN": { "Ref": "ROOTDOMAIN" },
          "BRANCHNAME": { "Ref": "BRANCHNAME" },
          "FEDOMAIN": { "Ref": "FEDOMAIN" },
          "APIENVIRONMENT": {"Ref": "APIENVIRONMENT"}
        }
      },
      "Timeout": 300
    }
  },
  "Resources": {
    "mhdpocbeLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB"
        ],
        "Path": "/service-role/",
        "RoleName": {
          "Fn::Join": [
            "",
            [{ "Ref": "APIENVIRONMENT" }, "-", "mhdpocbeLambdaRole-001"]
          ]
        }
      }
    },
    "mhdpocbeCWRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchEventsFullAccess"
        ],
        "Path": "/service-role/",
        "RoleName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-", "mhdpocbeCWRole"]]
        }
      }
    },
    "S3InputBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "BucketKeyEnabled": true,
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "BucketName": {
          "Fn::Join": [
            "-",
            [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "fhirresources"]
          ]
        },
        "ObjectLockEnabled": false,
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "Tags": [{ "Key": "shortcode", "Value": { "Ref": "SHORTCODE" } }]
      },
      "DependsOn": []
    },
    "mhdServerFunctionLayer": {
      "Type": "AWS::Serverless::LayerVersion",
      "Properties": {
        "ContentUri": "dependenciesLayer.zip",
        "Description": "The lambda layer containing the dependencies for the Lambda",
        "LayerName": {
          "Fn::Join": [
            "",
            [{ "Ref": "APIENVIRONMENT" }, "-mhdServerDependencies"]
          ]
        },
        "RetentionPolicy": "Delete"
      }
    },
    "dummyFhirEndpointFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy FHIR endpoint",
        "Environment": {
          "Variables" : {
            "S3BUCKET" : {
              "Fn::Join": [
                "-",
                [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "fhirresources"]
              ]
            }
          }
        },
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-dummyFhirEndpointFunction"]]
        },
        "Handler": "dummyfhirendpoint.handler",
        "Layers": [{"Ref": "mhdServerFunctionLayer"}],
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "DocumentReferenceFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy FHIR endpoint for DocumentReference resources",
        "Environment": {
          "Variables" : {
            "S3BUCKET" : {
              "Fn::Join": [
                "-",
                [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "fhirresources"]
              ]
            }
          }
        },
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DocumentReference/{documentid+}",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DocumentReference/{documentid+}",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-DocumentReferenceFunction"]]
        },
        "Handler": "DocumentReference.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "DocumentReferenceSearchFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy FHIR endpoint for DocumentReference resources search",
        "Environment": {
          "Variables" : {
            "S3BUCKET" : {
              "Fn::Join": [
                "-",
                [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "fhirresources"]
              ]
            }
          }
        },
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DocumentReference",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DocumentReference",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-DocumentReferenceSearchFunction"]]
        },
        "Handler": "DocumentReferenceSearch.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "DocumentManifestFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy FHIR endpoint for DocumentManifest resources",
        "Environment": {
          "Variables" : {
            "S3BUCKET" : {
              "Fn::Join": [
                "-",
                [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "fhirresources"]
              ]
            }
          }
        },
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DocumentManifest/{dmid+}",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DocumentManifest/{dmid+}",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-DocumentManifestFunction"]]
        },
        "Handler": "DocumentManifest.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "DocumentManifestSearchFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy FHIR endpoint for DocumentManifest resources",
        "Environment": {
          "Variables" : {
            "S3BUCKET" : {
              "Fn::Join": [
                "-",
                [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "fhirresources"]
              ]
            }
          }
        },
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DocumentManifest",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DocumentManifest",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-DocumentManifestSearchFunction"]]
        },
        "Handler": "DocumentManifestSearch.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "ListFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy FHIR endpoint for List resources",
        "Environment": {
          "Variables" : {
            "S3BUCKET" : {
              "Fn::Join": [
                "-",
                [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "fhirresources"]
              ]
            }
          }
        },
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/List/{listid+}",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/List/{listid+}",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-ListFunction"]]
        },
        "Handler": "List.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "ListSearchFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy FHIR endpoint for List resources",
        "Environment": {
          "Variables" : {
            "S3BUCKET" : {
              "Fn::Join": [
                "-",
                [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "fhirresources"]
              ]
            }
          }
        },
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/List",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/List",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-ListSearchFunction"]]
        },
        "Handler": "ListSearch.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "DiagnosticReportFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a dummy FHIR endpoint for DiagnosticReport resources",
        "Environment": {
          "Variables" : {
            "S3BUCKET" : {
              "Fn::Join": [
                "-",
                [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "fhirresources"]
              ]
            }
          }
        },
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DiagnosticReport/{diagnosticreportid+}",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DiagnosticReport/{diagnosticreportid+}",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-DiagnosticReportFunction"]]
        },
        "Handler": "DiagnosticReport.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "DiagnosticReportProxyFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "mhdpocapilambdas.zip",
        "Description": "The lambda function that acts as a proxy to retrieve DiagnosticReport resources",
        "Environment": {
          "Variables" : {
            "S3BUCKET" : {
              "Fn::Join": [
                "-",
                [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "fhirresources"]
              ]
            }
          }
        },
        "Events": {
          "Api": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApi" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DiagnosticReportProxy",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiSecure": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "mhdHttpApiSecure" },
              "Method": "ANY",
              "Path": "/mhdspoc/FHIR/R4/DiagnosticReportProxy",
              "TimeoutInMillis": 29000,
              "PayloadFormatVersion": "2.0"
            }
          }
        },
        "FunctionName": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-DiagnosticReportProxyFunction"]]
        },
        "Handler": "DiagnosticReportProxy.handler",
        "Role": { "Fn::GetAtt": ["mhdpocbeLambdaRole", "Arn"] },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": ["mhdpocbeLambdaRole"]
    },
    "mhdHttpApi": {
      "Type": "AWS::Serverless::HttpApi",
      "Properties": {
        "Description": "HTTP API for the mhd server requests",
        "Domain": {
          "BasePath": ["/"],
          "CertificateArn": {"Ref": "CERTIFICATEARN"},
          "DomainName": {"Fn::Join": [".", [{"Fn::Join": ["-", [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "BEDOMAIN" }]]},{ "Ref": "ROOTDOMAIN" }]]},
          "EndpointConfiguration": "REGIONAL",
          "Route53": {
            "HostedZoneId": {"Ref": "HOSTEDZONEID"}
          },
          "SecurityPolicy": "TLS_1_2"
        },
        "Name": {
          "Fn::Join": ["", [{ "Ref": "APIENVIRONMENT" }, "-mhdHttpApi"]]
        },
        "StageName": "$default"
      }
    },
    "S3CertsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "BucketKeyEnabled": true,
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "BucketName": {
          "Fn::Join": [
            "-",
            [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAME" }, { "Ref": "SHORTCODE" }, "certs"]
          ]
        },
        "ObjectLockEnabled": false,
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "Tags": [{ "Key": "shortcode", "Value": { "Ref": "SHORTCODE" } }]
      },
      "DependsOn": []
    },
    "mhdHttpApiSecure": {
      "Type": "AWS::Serverless::HttpApi",
      "Properties": {
        "Description": "HTTP API for the mhd server requests",
        "DisableExecuteApiEndpoint": true,
        "Domain": {
          "BasePath": ["/"],
          "CertificateArn": {"Ref": "CERTIFICATEARN"},
          "DomainName": {"Fn::Join": [".", [{"Fn::Join": ["-", [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAMESECURE" }, { "Ref": "BEDOMAIN" }]]},{ "Ref": "ROOTDOMAIN" }]]},
          "EndpointConfiguration": "REGIONAL",
          "MutualTlsAuthentication": {
            "TruststoreUri" :  { "Fn::Join": ["", ["s3://", { "Ref": "S3CertsBucket" }, "/certs/tsassolarchdemoapitruststore.pem"]]} 
          },
          "Route53": {
            "HostedZoneId": {"Ref": "HOSTEDZONEID"}
          },
          "SecurityPolicy": "TLS_1_2"
        },
        "Name": {
          "Fn::Join": ["-", [{ "Ref": "APIENVIRONMENT" }, { "Ref": "PROJECTNAMESECURE" },"mhdHttpApi"]]
        },
        "StageName": "$default"
      }
    }
  }
}
